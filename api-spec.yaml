openapi: 3.0.0
info: 
  title: sample API
  description: these is the description of the api 
  version: "1"

servers:
  - url: http://localhost:3000
    description: local development
  - url: https://quant-xi.vercel.app/

tags:
  - name: common
  - name: user
  - name: role
paths:
  /health-check:
    get:
      tags:
        - common
      responses:
        200:
          description: everything is good
        500:
          description: something bad happen
  /api/role:
    get:
      security:
      - BearerAuth: []
      tags:
        - role
      responses:
        200:
          description: roles data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
        500:
          description: internal server error
    post:
      security:
        - BearerAuth: []
      tags:
        - role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: 'a resource is created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createResponse'
        422:
          description: invalid input
        500:
          description: internal server error
  /api/role/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      security:
        - BearerAuth: []
      tags:
        - role
      responses:
        200: 
          description: 'a role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findResponse'
        404:
          description: 'not found'
        500:
          description: internal server error
    put:
      security:
        - BearerAuth: []
      tags:
        - role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: 'update a resource'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateResponse'
        422:
          description: "invalid data"
        500:
          description: 'internal server error'
    delete:
      security:
        - BearerAuth: []
      tags:
        - role
      responses:
        200: 
          description: 'deleted a role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteResponse'
          
  /api/user:
    get:
      security:
        - BearerAuth: []
      tags:
        - user
      responses:
        200:
          description: 'all resource'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
  /api/user/signup:
    post:
      security:
        - BearerAuth: []
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  description: minimum 8 charaters
      responses:
        201:
          description: 'created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createResponse'
        409:
          description: 'user already exist'
        500:
          description: 'internal server error'
  /api/user/login:
    post:
      security:
        - BearerAuth: []
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        404:
          description: 'user does not exist'
        401:
          description: 'password invalid'
        200:
          description: 'successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        500:
          description: 'internal server error'
          
  /api/user/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    delete:
      security:
        - BearerAuth: []
      tags:
        - user
      responses:
        200:
          description: 'success'
        500:
          description: 'internal server error'
    get:
      security:
        - BearerAuth: []
      tags:
        - user
      responses:
        200: 
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
        404:
          description: 'not found'
    patch:
      security:
        - BearerAuth: []
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: 'updated successfully'
        404:
          description: 'not found'

        
    
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    'searchResponse':
      type: object
      properties:
        count:
          type: number
        data:
          type: object 
    'createResponse':
      type: object
      properties:
        _id: 
          type: string
    'deleteResponse':
      type: object
      properties:
        message:
          type: string
    'updateResponse':
      type: object
      properties:
        message:
          type: string
    'findResponse':
      type: object
      properties:
        data:
          type: object